TESTS INTEGRALES

Archivos disponibles:
	* 10-gatos-20-perros
	* 50-gatos-50-perros
	* 100-gatos-10-perros
	* 200-zorros

____________________

*) Idea: testear cada archivo en el ejercicio 2 (correr el count, y chequear member-maximum del mapa):

count_words(10-gatos-20-perros)			// assert members y max -> <perro,20>
count_words(50-gatos-50-perros)			// assert members y max -> <perro,70>
count_words(100-gatos-10-perros)		// assert members y max -> <gato,160>
count_words(200-zorros)					// assert members y max -> <zorro,200>

____________________

*) Idea: testear ejercicios 3-4-5 (calcular el maximo para las siguientes listas)

list<string> l1 =  {10-gatos-20-perros} 	// <gato,10>, <perro,20>
list<string> l2 =  {10-gatos-20-perros, 50-gatos-50-perros}		// <gato,60>, <perro,70>
list<string> l3 =  {10-gatos-20-perros, 50-gatos-50-perros, 100-gatos-10-perros}	// <gato,160>, <perro,80>
list<string> l4 =  {10-gatos-20-perros, 50-gatos-50-perros, 100-gatos-10-perros, 200-zorros}	// <zorro,200>, <gato,160>, <perro,80>

assert l1.max -> <perro,20>
assert l2.max -> <perro,70>
assert l3.max -> <gato,160>
assert l4.max -> <zorro,200>

TIP! Correr alg√∫n caso con menos threads que archivos, para chequear que los structs funquen bien en los thrds (ejemplo: l4 con p_archivos=2)